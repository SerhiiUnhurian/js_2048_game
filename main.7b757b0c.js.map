{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","console","log","size","score","status","board","map","row","createEmptyBoard","Array","from","length","fill","getStatus","moved","newRow","filter","tile","col","push","toString","createRandomTile","checkGameStatus","reverse","moveLeft","transposeBoard","moveRight","_","colIndex","initGame","max","Math","floor","random","emptyCells","forEach","rowIndex","cell","cellIndex","randomIndex","randomNumber","newBoard","slice","generateCellValue","includes","canMakeMove","hasMergeableTilesInRow","filteredRow","value","i","filteredCol","val","module","exports","document","addEventListener","startButton","querySelector","scoreElement","messageStart","messageWin","messageLose","game","updateTable","state","cells","querySelectorAll","index","cellValue","textContent","className","classList","remove","updateScore","contains","start","replace","add","getState","restart","getScore","event","key","moveUp","moveDown"],"mappings":"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","file":"main.7b757b0c.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n\n    this.board = initialState\n      ? initialState.map((row) => [...row])\n      : this.createEmptyBoard();\n  }\n\n  createEmptyBoard() {\n    return Array.from({ length: this.size }, () => Array(this.size).fill(0));\n  }\n\n  moveLeft() {\n    if (this.getStatus() === 'playing') {\n      let moved = false;\n\n      for (let row = 0; row < this.board.length; row++) {\n        let newRow = this.board[row].filter((tile) => tile !== 0);\n\n        for (let col = 0; col < newRow.length - 1; col++) {\n          if (newRow[col] !== 0 && newRow[col] === newRow[col + 1]) {\n            newRow[col] *= 2;\n            newRow[col + 1] = 0;\n            this.score += newRow[col];\n            moved = true;\n          }\n        }\n        newRow = newRow.filter((tile) => tile !== 0);\n\n        while (newRow.length < this.board[row].length) {\n          newRow.push(0);\n        }\n\n        if (this.board[row].toString() !== newRow.toString()) {\n          moved = true;\n        }\n        this.board[row] = newRow;\n      }\n\n      if (moved) {\n        this.createRandomTile();\n        this.checkGameStatus();\n      }\n\n      return moved;\n    }\n  }\n\n  moveRight() {\n    if (this.getStatus() === 'playing') {\n      this.board = this.board.map((row) => row.reverse());\n      this.moveLeft();\n      this.board = this.board.map((row) => row.reverse());\n    }\n  }\n  moveUp() {\n    if (this.getStatus() === 'playing') {\n      this.transposeBoard();\n      this.moveLeft();\n      this.transposeBoard();\n    }\n  }\n  moveDown() {\n    if (this.getStatus() === 'playing') {\n      this.transposeBoard();\n      this.moveRight();\n      this.transposeBoard();\n    }\n  }\n\n  transposeBoard() {\n    this.board = this.board[0].map((_, colIndex) =>\n      // eslint-disable-next-line prettier/prettier\n      this.board.map((row) => row[colIndex]));\n\n    return this.board;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  initGame() {\n    this.board = this.createEmptyBoard();\n    this.createRandomTile();\n    this.createRandomTile();\n    this.status = 'playing';\n    // this.updateTable();\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.initGame();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Add your own methods here\n\n  randomNumber(max) {\n    return Math.floor(Math.random() * (max + 1));\n  }\n\n  generateCellValue() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  // updateTable() {\n  //   const cells = document.querySelectorAll('.field-cell');\n  //   let index = 0;\n\n  //   this.board.forEach((row) => {\n  //     row.forEach((cellValue) => {\n  //       const cell = cells[index++];\n\n  //       cell.textContent = cellValue !== 0 ? cellValue : '';\n  // eslint-disable-next-line max-len\n  //       cell.className = `field-cell ${cellValue ? 'field-cell--' + cellValue : ''}`;\n  //     });\n  //   });\n  // }\n\n  createRandomTile() {\n    const emptyCells = [];\n\n    // eslint-disable-next-line no-shadow\n    this.board.forEach((row, rowIndex) => {\n      // eslint-disable-next-line no-shadow\n      row.forEach((cell, cellIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ rowIndex, cellIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = this.randomNumber(emptyCells.length - 1);\n    const { rowIndex, cellIndex } = emptyCells[randomIndex];\n\n    const newBoard = this.board.map((row) => row.slice());\n\n    newBoard[rowIndex][cellIndex] = this.generateCellValue();\n    this.board = newBoard;\n  }\n\n  checkGameStatus() {\n    for (const row of this.board) {\n      if (row.includes(2048)) {\n        this.status = 'win';\n\n        return;\n      }\n    }\n\n    for (const row of this.board) {\n      if (row.includes(0)) {\n        return;\n      }\n    }\n\n    if (!this.canMakeMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  canMakeMove() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size - 1; col++) {\n        if (\n          (this.board[row][col] === this.board[row][col + 1] &&\n            this.board[row][col] !== 0) ||\n          (this.board[row][col] !== 0 && this.hasMergeableTilesInRow(row))\n        ) {\n          return true;\n        }\n      }\n    }\n\n    for (let col = 0; col < this.size; col++) {\n      for (let row = 0; row < this.size - 1; row++) {\n        if (this.board[row][col] === this.board[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hasMergeableTilesInRow(row) {\n    const filteredRow = this.board[row].filter((value) => value !== 0);\n\n    for (let i = 0; i < filteredRow.length - 1; i++) {\n      if (filteredRow[i] === filteredRow[i + 1]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  hasMergeableTilesInColumn(col) {\n    const filteredCol = this.board.map((row) =>\n      // eslint-disable-next-line prettier/prettier\n      row[col].filter((val) => val !== 0));\n\n    for (let i = 0; i < filteredCol.length - 1; i++) {\n      if (filteredCol[i] === filteredCol[i + 1]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nimport Game from '../modules/Game.class';\n\n// Uncomment the next lines to use your game instance in the browser\ndocument.addEventListener('DOMContentLoaded', () => {\n  const startButton = document.querySelector('.button.start');\n  const scoreElement = document.querySelector('.game-score');\n  const messageStart = document.querySelector('.message-start');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n\n  const game = new Game();\n\n  startButton.addEventListener('click', () => {\n    if (startButton.classList.contains('start')) {\n      game.start();\n      startButton.textContent = 'Restart';\n      startButton.classList.replace('start', 'restart');\n      messageStart.classList.add('hidden');\n      updateTable(game.getState());\n    } else {\n      game.restart();\n      updateTable(game.getState());\n      updateScore(game.getScore());\n      startButton.textContent = 'Start';\n      startButton.classList.replace('restart', 'start');\n      messageStart.classList.remove('hidden');\n      messageLose.classList.add('hidden');\n    }\n  });\n\n  // eslint-disable-next-line no-shadow\n  document.addEventListener('keydown', (event) => {\n    switch (event.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n    updateTable(game.getState());\n    updateScore(game.getScore());\n  });\n\n  function updateTable(state) {\n    const cells = document.querySelectorAll('.field-cell');\n    let index = 0;\n\n    state.forEach((row) => {\n      row.forEach((cellValue) => {\n        const cell = cells[index++];\n\n        cell.textContent = cellValue !== 0 ? cellValue : '';\n        cell.className = `field-cell ${cellValue ? 'field-cell--' + cellValue : ''}`;\n      });\n    });\n\n    updateGameStatus();\n  }\n\n  function updateScore(score) {\n    scoreElement.textContent = score;\n  }\n\n  function updateGameStatus() {\n    if (game.status === 'win') {\n      messageWin.classList.remove('hidden');\n    } else if (game.status === 'lose') {\n      messageLose.classList.remove('hidden');\n    }\n  }\n});\n\n// Write your code here\n"]}